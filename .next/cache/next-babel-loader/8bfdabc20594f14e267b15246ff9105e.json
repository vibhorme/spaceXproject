{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/vibhor/Documents/spaceXproject/components/Typography/index.tsx\";\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React from 'react';\nimport Styled, { css } from 'styled-components';\nconst fontSizes = {\n  h1: css`\n    font-size: 4rem;\n    line-height: 125%;\n  `,\n  h2: css`\n    font-size: 3rem;\n    line-height: 116%;\n  `,\n  h3: css`\n    font-size: 2rem;\n    line-height: 125%;\n  `,\n  h4: css`\n    font-size: 1.5rem;\n    line-height: 132%;\n  `,\n  h5: css`\n    font-size: 1.125rem;\n    line-height: 132%;\n  `,\n  h6: css`\n    font-size: 1rem;\n    line-height: 148%;\n  `,\n  normal: css`\n    font-size: 0.875rem;\n    line-height: 111%;\n  `,\n  small: css`\n    font-size: 0.75rem;\n    line-height: 100%;\n  `,\n  verySmall: css`\n    font-size: 0.6875rem;\n    line-height: 100%;\n  `\n};\nconst fontWeights = {\n  regular: css`\n    font-weight: 400;\n  `,\n  medium: css`\n    font-weight: 500;\n  `,\n  semiBold: css`\n    font-weight: 600;\n  `,\n  bold: css`\n    font-weight: 700;\n  `\n};\n\nconst getFontWeight = ({\n  fontWeight\n}) => fontWeights[fontWeight];\n\nconst getFontSize = ({\n  fontSize\n}) => fontSizes[fontSize];\n\nconst getLineClamp = ({\n  lineClamp\n}) => {\n  if (typeof lineClamp === 'number') {\n    return css`\n      display: -webkit-box;\n      -webkit-line-clamp: ${lineClamp};\n      -webkit-box-orient: vertical;\n      overflow: hidden;\n      white-space: normal;\n    `;\n  } else return ``;\n};\n\nexport const TextStyled = Styled.p`\n  ${getFontSize}\n  ${getFontWeight}\n  margin: ${props => props.margin ? props.margin : '0'};\n  padding: ${props => props.padding ? props.padding : '0'};\n  word-break: ${props => props.wordBreak ? props.wordBreak : `unset`};\n  color: ${props => props.blur ? 'transparent' : props.stringColor ? props.stringColor : '#222222'};\n  text-shadow: ${props => props.blur ? '0 0 5px rgba(0,0,0,0.5)' : 'unset'};\n  overflow: ${props => props.overflow ? props.overflow : 'visible'};\n  max-height: ${props => props.maxHeight ? props.maxHeight : 'none'};\n  min-width: ${props => props.minWidth ? props.minWidth : 'none'};\n  max-width: ${props => props.maxWidth ? props.maxWidth : 'none'};\n  text-align: ${props => props.textAlign ? props.textAlign : 'initial'};\n  text-transform: ${props => props.textTransform ? props.textTransform : 'none'};\n  cursor: ${props => props.cursor};\n  ${getLineClamp}\n\n  &:hover {\n    color: ${props => props.hoverColor};\n  }\n`;\n\nconst Text = (_ref) => {\n  let {\n    children\n  } = _ref,\n      props = _objectWithoutProperties(_ref, [\"children\"]);\n\n  return /*#__PURE__*/_jsxDEV(TextStyled, {\n    fontSize: props.fontSize,\n    fontWeight: props.fontWeight,\n    wordBreak: props.wordBreak,\n    stringColor: props.stringColor,\n    margin: props.margin,\n    textTransform: props.textTransform,\n    textAlign: props.textAlign,\n    padding: props.padding,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 142,\n    columnNumber: 5\n  }, this);\n};\n\nexport default Text;","map":{"version":3,"sources":["/Users/vibhor/Documents/spaceXproject/components/Typography/index.tsx"],"names":["React","Styled","css","fontSizes","h1","h2","h3","h4","h5","h6","normal","small","verySmall","fontWeights","regular","medium","semiBold","bold","getFontWeight","fontWeight","getFontSize","fontSize","getLineClamp","lineClamp","TextStyled","p","props","margin","padding","wordBreak","blur","stringColor","overflow","maxHeight","minWidth","maxWidth","textAlign","textTransform","cursor","hoverColor","Text","children"],"mappings":"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","sourcesContent":["import React from 'react';\nimport Styled, { css } from 'styled-components';\n\ntype ThemeProp = (props: any) => string;\n\nexport interface TextProps {\n  fontSize:\n    | 'h1'\n    | 'h2'\n    | 'h3'\n    | 'h4'\n    | 'h5'\n    | 'h6'\n    | 'normal'\n    | 'small'\n    | 'verySmall';\n  fontWeight: 'regular' | 'medium' | 'semiBold' | 'bold';\n  stringColor: ThemeProp | string;\n  hoverColor?: ThemeProp;\n  children: JSX.Element | React.ReactNode;\n  blur?: boolean;\n  margin?: string;\n  padding?: string;\n  overflow?: 'visible' | 'hidden' | 'scroll' | 'auto' | 'initial' | 'inherit';\n  maxHeight?: 'none' | 'length' | 'initial' | 'inherit' | string;\n  lineClamp?: number;\n  minWidth?: 'auto' | 'max-content' | 'min-content' | 'fit-content' | string;\n  maxWidth?: 'auto' | 'max-content' | 'min-content' | 'fit-content' | string;\n  textAlign?: 'left' | 'right' | 'center' | 'justify' | 'initial' | 'inherit';\n  textTransform?: 'uppercase' | 'capitalize' | 'lowercase';\n  wordBreak?:\n    | 'break-all'\n    | 'break-word'\n    | 'inherit'\n    | 'initial'\n    | 'keep-all'\n    | 'normal'\n    | 'unset';\n  cursor?: 'pointer' | 'auto';\n  onClick?: () => void;\n}\n\nconst fontSizes = {\n  h1: css`\n    font-size: 4rem;\n    line-height: 125%;\n  `,\n  h2: css`\n    font-size: 3rem;\n    line-height: 116%;\n  `,\n\n  h3: css`\n    font-size: 2rem;\n    line-height: 125%;\n  `,\n  h4: css`\n    font-size: 1.5rem;\n    line-height: 132%;\n  `,\n  h5: css`\n    font-size: 1.125rem;\n    line-height: 132%;\n  `,\n  h6: css`\n    font-size: 1rem;\n    line-height: 148%;\n  `,\n  normal: css`\n    font-size: 0.875rem;\n    line-height: 111%;\n  `,\n  small: css`\n    font-size: 0.75rem;\n    line-height: 100%;\n  `,\n  verySmall: css`\n    font-size: 0.6875rem;\n    line-height: 100%;\n  `,\n};\n\nconst fontWeights = {\n  regular: css`\n    font-weight: 400;\n  `,\n  medium: css`\n    font-weight: 500;\n  `,\n  semiBold: css`\n    font-weight: 600;\n  `,\n  bold: css`\n    font-weight: 700;\n  `,\n};\n\nconst getFontWeight = ({ fontWeight }: TextProps) => fontWeights[fontWeight];\nconst getFontSize = ({ fontSize }: TextProps) => fontSizes[fontSize];\nconst getLineClamp = ({ lineClamp }: TextProps) => {\n  if (typeof lineClamp === 'number') {\n    return css`\n      display: -webkit-box;\n      -webkit-line-clamp: ${lineClamp};\n      -webkit-box-orient: vertical;\n      overflow: hidden;\n      white-space: normal;\n    `;\n  } else return ``;\n};\n\nexport const TextStyled = Styled.p<TextProps>`\n  ${getFontSize}\n  ${getFontWeight}\n  margin: ${(props) => (props.margin ? props.margin : '0')};\n  padding: ${(props) => (props.padding ? props.padding : '0')};\n  word-break: ${(props) => (props.wordBreak ? props.wordBreak : `unset`)};\n  color: ${(props) =>\n    props.blur\n      ? 'transparent'\n      : props.stringColor\n      ? props.stringColor\n      : '#222222'};\n  text-shadow: ${(props) => (props.blur ? '0 0 5px rgba(0,0,0,0.5)' : 'unset')};\n  overflow: ${(props) => (props.overflow ? props.overflow : 'visible')};\n  max-height: ${(props) => (props.maxHeight ? props.maxHeight : 'none')};\n  min-width: ${(props) => (props.minWidth ? props.minWidth : 'none')};\n  max-width: ${(props) => (props.maxWidth ? props.maxWidth : 'none')};\n  text-align: ${(props) => (props.textAlign ? props.textAlign : 'initial')};\n  text-transform: ${(props) =>\n    props.textTransform ? props.textTransform : 'none'};\n  cursor: ${(props) => props.cursor};\n  ${getLineClamp}\n\n  &:hover {\n    color: ${(props) => props.hoverColor};\n  }\n`;\n\nconst Text: React.SFC<TextProps> = ({ children, ...props }: TextProps) => {\n  return (\n    <TextStyled\n      fontSize={props.fontSize}\n      fontWeight={props.fontWeight}\n      wordBreak={props.wordBreak}\n      stringColor={props.stringColor}\n      margin={props.margin}\n      textTransform={props.textTransform}\n      textAlign={props.textAlign}\n      padding={props.padding}\n    >\n      {children}\n    </TextStyled>\n  );\n};\n\nexport default Text;\n"]},"metadata":{},"sourceType":"module"}