{"ast":null,"code":"import { jsx as _jsx } from \"react/jsx-runtime\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React from 'react';\nimport styled, { css } from 'styled-components';\n\nconst getBorderRadius = props => {\n  switch (props.rounded) {\n    case 'top':\n      return css`\n        border-radius: 4px 4px 0 0;\n      `;\n\n    case 'bottom':\n      return css`\n        border-radius: 0 0 4px 4px;\n      `;\n\n    case 'left':\n      return css`\n        border-radius: 18px 0 0 18px;\n      `;\n\n    case 'right':\n      return css`\n        border-radius: 0 18px 18px 0;\n      `;\n\n    case 'all':\n      return css`\n        border-radius: 4px;\n      `;\n\n    case 'max':\n      return css`\n        border-radius: 12px;\n      `;\n  }\n};\n\nconst CardStyle = styled.div`\n  box-sizing: ${props => props.boxSizing};\n  position: ${props => props.position};\n  z-index: ${props => props.zIndex ? props.zIndex : `0`};\n  top: ${props => props.top};\n  right: ${props => props.right};\n  bottom: ${props => props.bottom};\n  box-sizing: border-box;\n  left: ${props => props.left};\n  padding: ${props => props.padding ? props.padding : `15px 20px`};\n  box-shadow:${props => props.boxShadow ? props.boxShadow : `unset`} ${props => props.shadowColor ? props.shadowColor : ''};\n  flex-grow: ${props => props.flexGrow ? `1` : `unset`};\n  background: ${props => props.background ? props.background : `#ffffff`};\n  color: ${props => props.color};\n  border: ${props => props.border};\n  font-size: ${props => props.fontSize};\n  border-left: ${props => props.border ? props.border : props.borderLeft ? props.borderLeft : `none`}\n  border-right: ${props => props.border ? props.border : props.borderRight ? props.borderRight : `none`};\n  border-top: ${props => props.border ? props.border : props.borderTop ? props.borderTop : `none`};\n  border-bottom: ${props => props.border ? props.border : props.borderBottom ? props.borderBottom : `none`};\n  margin: ${props => props.margin ? props.margin : `0px`};\n  border-radius: ${props => props.borderRadius ? props.borderRadius : '0'};\n  ${getBorderRadius};\n  backdrop-filter: ${props => props.backdropFilter ? props.backdropFilter : `unset`};\n  max-width: ${props => props.maxWidth};\n  min-width: ${props => props.minWidth};\n  width: ${props => props.width};\n  max-height: ${props => props.maxHeight};\n  height: ${props => props.height};\n  text-align: ${props => props.textAlign};\n  cursor: ${props => props.cursor ? props.cursor : `unset`};\n  overflow: ${props => props.overflow};\n  align-self: ${props => props.alignSelf ? props.alignSelf : `unset`};\n  &:hover {\n    background: ${props => props.hoverBackground ? props.hoverBackground : props.background};\n      > div > p {\n        color: ${props => props.hover ? `white` : ``};\n      }\n    border-left: ${props => props.hover && props.hoverBorderLeft ? props.hoverBorderLeft : props.borderLeft ? props.borderLeft : props.border ? props.border : `unset`}\n    box-shadow:${props => props.hoverBoxShadow ? props.hoverBoxShadow : props.boxShadow} ${props => props.hoverBoxShadow ? props.hoverShadowColor : props.shadowColor}\n  }\n  :after {\n    ${props => props.after};\n  }\n`;\n\nconst Card = (_ref) => {\n  let {\n    children\n  } = _ref,\n      props = _objectWithoutProperties(_ref, [\"children\"]);\n\n  return /*#__PURE__*/_jsx(CardStyle, _objectSpread(_objectSpread({}, props), {}, {\n    padding: props.padding,\n    margin: props.margin,\n    background: props.background,\n    flexGrow: props.flexGrow,\n    hover: props.hover,\n    hoverBoxShadow: props.hoverBoxShadow,\n    maxHeight: props.maxHeight,\n    overflow: props.overflow,\n    position: props.position,\n    style: props.customStyle,\n    hoverBackground: props.hoverBackground,\n    children: children\n  }));\n};\n\nCardStyle.defaultProps = {\n  top: 'unset',\n  right: 'unset',\n  bottom: 'unset',\n  left: 'unset'\n};\nexport default Card;","map":null,"metadata":{},"sourceType":"module"}