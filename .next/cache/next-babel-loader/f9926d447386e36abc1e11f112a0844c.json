{"ast":null,"code":"import { jsx as _jsx } from \"react/jsx-runtime\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React from 'react';\nimport Styled from 'styled-components';\nconst ButtonStyled = Styled.button`\npadding: 5px 15px;\nbackground: ${props => !props.isActive ? '#C5E09B' : ' #7CBA00;'};\nmargin: 0px 0px 15px 0px;\noutline: none;\ncursor: pointer;\nborder: none;\nborder-radius: 5px;\n :hover {\n   background: #7CBA00;\n }\n \n`;\n\nconst Button = (_ref) => {\n  let {\n    isActive,\n    onClick\n  } = _ref,\n      props = _objectWithoutProperties(_ref, [\"isActive\", \"onClick\"]);\n\n  const [isActiveButton, setIsActiveButton] = React.useState(isActive);\n\n  const handleOnClick = () => {\n    setIsActiveButton(!isActiveButton);\n    onClick();\n  };\n\n  return /*#__PURE__*/_jsx(ButtonStyled, _objectSpread({\n    isActive: isActive,\n    onClick: () => handleOnClick()\n  }, props));\n};\n\nexport default Button;","map":null,"metadata":{},"sourceType":"module"}