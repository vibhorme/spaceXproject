{"ast":null,"code":"import { jsx as _jsx } from \"react/jsx-runtime\";\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React from 'react';\nimport Styled, { css } from 'styled-components';\nconst fontSizes = {\n  h1: css`\n    font-size: 4rem;\n    line-height: 125%;\n  `,\n  h2: css`\n    font-size: 3rem;\n    line-height: 116%;\n  `,\n  h3: css`\n    font-size: 2rem;\n    line-height: 125%;\n  `,\n  h4: css`\n    font-size: 1.5rem;\n    line-height: 132%;\n  `,\n  h5: css`\n    font-size: 1.125rem;\n    line-height: 132%;\n  `,\n  h6: css`\n    font-size: 1rem;\n    line-height: 148%;\n  `,\n  normal: css`\n    font-size: 0.875rem;\n    line-height: 111%;\n  `,\n  small: css`\n    font-size: 0.75rem;\n    line-height: 100%;\n  `,\n  verySmall: css`\n    font-size: 0.6875rem;\n    line-height: 100%;\n  `\n};\nconst fontWeights = {\n  regular: css`\n    font-weight: 400;\n  `,\n  medium: css`\n    font-weight: 500;\n  `,\n  semiBold: css`\n    font-weight: 600;\n  `,\n  bold: css`\n    font-weight: 700;\n  `\n};\n\nconst getFontWeight = ({\n  fontWeight\n}) => fontWeights[fontWeight];\n\nconst getFontSize = ({\n  fontSize\n}) => fontSizes[fontSize];\n\nconst getLineClamp = ({\n  lineClamp\n}) => {\n  if (typeof lineClamp === 'number') {\n    return css`\n      display: -webkit-box;\n      -webkit-line-clamp: ${lineClamp};\n      -webkit-box-orient: vertical;\n      overflow: hidden;\n      white-space: normal;\n    `;\n  } else return ``;\n};\n\nexport const TextStyled = Styled.p`\n  ${getFontSize}\n  ${getFontWeight}\n  margin: ${props => props.margin ? props.margin : '0'};\n  padding: ${props => props.padding ? props.padding : '0'};\n  word-break: ${props => props.wordBreak ? props.wordBreak : `unset`};\n  color: ${props => props.blur ? 'transparent' : props.stringColor ? props.stringColor : '#222222'};\n  text-shadow: ${props => props.blur ? '0 0 5px rgba(0,0,0,0.5)' : 'unset'};\n  overflow: ${props => props.overflow ? props.overflow : 'visible'};\n  max-height: ${props => props.maxHeight ? props.maxHeight : 'none'};\n  min-width: ${props => props.minWidth ? props.minWidth : 'none'};\n  max-width: ${props => props.maxWidth ? props.maxWidth : 'none'};\n  text-align: ${props => props.textAlign ? props.textAlign : 'initial'};\n  text-transform: ${props => props.textTransform ? props.textTransform : 'none'};\n  cursor: ${props => props.cursor};\n  ${getLineClamp}\n\n  &:hover {\n    color: ${props => props.hoverColor};\n  }\n`;\n\nconst Text = (_ref) => {\n  let {\n    children\n  } = _ref,\n      props = _objectWithoutProperties(_ref, [\"children\"]);\n\n  return /*#__PURE__*/_jsx(TextStyled, {\n    fontSize: props.fontSize,\n    fontWeight: props.fontWeight,\n    wordBreak: props.wordBreak,\n    stringColor: props.stringColor,\n    margin: props.margin,\n    children: children\n  });\n};\n\nexport default Text;","map":null,"metadata":{},"sourceType":"module"}